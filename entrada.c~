#include "entrada.h"

int main(int argc, char *argv[])
{
    
    Disco *disco = montarDisco(argv[2]);

    imprimirDisco(disco);
    printf("\n");
    printf("%d) ",realizarOperacao(disco, 1, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacao(disco, 1, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacao(disco, 0, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacao(disco, 1, 0));    imprimirBlocos(disco);
    printf("\n");
    imprimirDisco(disco);
    printf("\n");
    desmontarDisco(disco);

    return 0;
}

// Main: realizando cada operacao de um processo separadamente (realizarOperacoes) -> argv[1] = "file.txt"
/*int main(int argc, char *argv[])
{
    Disco *disco = montarDisco(argv[1]);

    imprimirDisco(disco);
    printf("\n");
    printf("%d) ",realizarOperacao(disco, 1, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacao(disco, 1, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacao(disco, 0, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacao(disco, 1, 0));    imprimirBlocos(disco);
    printf("\n");
    imprimirDisco(disco);
    printf("\n");
    desmontarDisco(disco);

    return 0;
}*/

// Main: realizando todas operacoes de um processo de uma vez (realizarOperacoes) -> argv[1] = "file.txt"
/*int main(int argc, char *argv[])
{
    Disco *disco = montarDisco(argv[1]);

    imprimirDisco(disco);
    printf("\n");
    printf("%d) ",realizarOperacoes(disco, 1, 0));    imprimirBlocos(disco);
    printf("%d) ",realizarOperacoes(disco, 0, 0));    imprimirBlocos(disco);
    printf("\n");
    imprimirDisco(disco);
    printf("\n");
    desmontarDisco(disco);

    return 0;
}*/

// Inicializa o disco a partir de um arquivo de entrada com nome especificado em entrada
Disco* montarDisco(char *entrada)
{
    // Variaveis utilizadas
    FILE *fp = fopen(entrada,"r");
    if(fp == NULL)
    {
        printf("Erro ao abrir arquivo '%s'.\n",entrada);
        return NULL;
    }
    Disco *disco = (Disco *)malloc(sizeof(Disco));
    ListaArquivo auxListaArquivo;
    ListaOperacao auxListaOperacao;
    int nRead = 0, auxInt1 = -1, auxInt2 = 0;
    char buffer[40] = {0};
    char *pch;

    // Preparando disco para receber conteúdo
    disco->nBlocos = -1;
    disco->nSegmentosOcupados = -1;
    disco->arquivos = criarListaArquivo();
    disco->operacoes = criarListaOperacao();
    disco->realizadas = criarListaOperacao();

    // Lendo arquivo de entrada
    while(!feof(fp))
    {
        // Obtendo linha do arquivo
        do
        {
            auxInt1++;
            nRead = fread(&buffer[auxInt1],sizeof(char),1,fp);
        }
        while(buffer[auxInt1] != '\n' && nRead != 0);
        buffer[auxInt1] = '\0';
        auxInt1 = -1;
        // Filtrando linhas vazias
        if(!feof(fp))
        {
            // Obtendo primeira linha - numero de blocos no disco
            if(disco->nBlocos == -1)
                disco->nBlocos = atoi(buffer);
            // Obtendo segunda linha - numero de segmentos ocupados
            else if(disco->nSegmentosOcupados == -1)
                disco->nSegmentosOcupados = atoi(buffer);
            // Obtendo terceira linha até linha (nSegmentosOcupados + 2) - arquivos presentes na inicialização
            else if(auxInt2 < disco->nSegmentosOcupados)
            {
                auxInt2++;
                // Obtendo nome do arquivo
                pch = strtok(buffer," ");
                auxListaArquivo.nomeArquivo = *pch;
                // Obtendo numero do primeiro bloco
                pch = strtok(NULL," ");
                pch[strlen(pch)-1] = '\0';
                auxListaArquivo.nPrimeiroBloco = atoi(pch);
                // Obtendo numero de blococs ocupados
                pch = strtok(NULL,"\n");
                auxListaArquivo.nBlocosOcupados = atoi(pch);
                // Criando nova entrada na lista/tabela de arquivos 
                disco->arquivos = inserirListaArquivo(disco->arquivos,auxListaArquivo.nomeArquivo,auxListaArquivo.nPrimeiroBloco,auxListaArquivo.nBlocosOcupados,-1);
            }
            // Obtendo linha (nSegmentosOcupados + 3_ em diante - operacoes a serem realizadas por cada processo
            else
            {
                // Obtendo id do processo responsavel pela operacao
                pch = strtok(buffer," ");
                pch[strlen(pch)-1] = '\0';
                auxListaOperacao.idProcesso = atoi(pch);
                // Obtendo codigo da operacao
                pch = strtok(NULL," ");
                pch[strlen(pch)-1] = '\0';
                auxListaOperacao.codigoOperacao = atoi(pch);
                // Caso se trate de uma operacao de deletar, obtem o nome do arquivo e zera o numero de blocos a serem criados
                if(auxListaOperacao.codigoOperacao)
                {
                    pch = strtok(NULL,"\n");
                    auxListaOperacao.nomeArquivo = *pch;
                    auxListaOperacao.nBlocosCriar = 0;
                }
                // Caso se trate de uma operacao de criar, obtem o nome do arquivo e o numero de blocos a serem criados
                else
                {
                    pch = strtok(NULL," ");
                    auxListaOperacao.nomeArquivo = *pch;
                    pch = strtok(NULL,"\n");
                    auxListaOperacao.nBlocosCriar = atoi(pch);
                }
                // Criando nova entrada na lista/tabela de operacoes
                disco->operacoes = inserirListaOperacao(disco->operacoes,auxListaOperacao.idProcesso,auxListaOperacao.codigoOperacao,auxListaOperacao.nomeArquivo,auxListaOperacao.nBlocosCriar, 0);
            }
        }
    }
    // Finalizando leitura do arquivo de entrada
    fclose(fp);
    return disco;
}

// Desaloca dados relativos ao disco, imprimindo um relatorio das operacoes realizadas (ou nao realizadas)
void desmontarDisco(Disco *disco)
{
    // Variável utilizada
    ListaOperacao *auxListaOperacao = NULL;

    desalocarListaArquivo(disco->arquivos);
    // Operacoes que foram realizadas
    for(auxListaOperacao=disco->realizadas; auxListaOperacao != NULL; auxListaOperacao = auxListaOperacao->proxima)
    {
        switch(auxListaOperacao->estado)
        {
            case CRIAR_SUCESSO:
                printf("O processo %d criou o arquivo %c.\n", auxListaOperacao->idProcesso, auxListaOperacao->nomeArquivo);
                break;
            case CRIAR_FALHA:
                printf("O processo %d nao pode criar o arquivo %c.\n", auxListaOperacao->idProcesso, auxListaOperacao->nomeArquivo);
                break;
            case DELETAR_SUCESSO:
                printf("O processo %d deletou o arquivo %c.\n", auxListaOperacao->idProcesso, auxListaOperacao->nomeArquivo);
                break;
            case DELETAR_FALHA:
                printf("O processo %d nao pode deletar o arquivo %c.\n", auxListaOperacao->idProcesso, auxListaOperacao->nomeArquivo);
                break;
            default:
                break;
        }
    }
    desalocarListaOperacao(disco->realizadas);
    // Operacoes que não foram realizadas
    for(auxListaOperacao=disco->operacoes; auxListaOperacao != NULL; auxListaOperacao = auxListaOperacao->proxima)
    {
        printf("O processo %d nao foi executado.\n", auxListaOperacao->idProcesso);
    }
    desalocarListaOperacao(disco->operacoes);
    free(disco);
    return;
}

// Imprime informações do disco
void imprimirDisco(Disco *disco)
{
    printf("nBlocos: %d\nnSegmentosOcupados: %d\n",disco->nBlocos,disco->nSegmentosOcupados);
    printf("arquivos:\n");
    imprimirListaArquivo(disco->arquivos);
    printf("operacoes:\n");
    imprimirListaOperacao(disco->operacoes);
    printf("realizadas:\n");
    imprimirListaOperacao(disco->realizadas);
    return;
}
