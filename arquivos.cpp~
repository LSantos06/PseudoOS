#include<stdio.h>
#include<stdlib.h>
#include<string.h>

// 
typedef struct arquivo
{
    char nomeArquivo;
    int nPrimeiroBloco;
    int nBlocosOcupados;
    struct arquivo *proximo;
} Arquivo;

// 
typedef struct operacao
{
    int idProcesso;
    int codigoOperacao;
    char nomeArquivo;
    int nBlocosCriar;
    struct operacao *proxima;
} Operacao;

// 
typedef struct disco
{
    int nBlocos;
    int nSegmentosOcupados;
    Arquivo *arquivos;
    Operacao *operacoes;
    
} Disco;

// 
Disco* montarDisco(char *);
void desmontarDisco(Disco *);
void imprimirDisco(Disco *);
void imprimirBlocos(Disco *);

// 
Arquivo* criarArquivo();
Arquivo* inserirArquivo(Arquivo *, char, int, int);
int vazioArquivo(Arquivo *);
void desalocarArquivo(Arquivo *);
void imprimirArquivo(Arquivo *);

// 
Operacao* criarOperacao(); 
Operacao* inserirOperacao(Operacao *, int, int, char, int);
int vazioOperacao(Operacao *);
void desalocarOperacao(Operacao *);
void imprimirOperacao(Operacao *);

// 
int main(int argc, char *argv[])
{
    Disco *disco = montarDisco(argv[1]);
    imprimirDisco(disco);
    imprimirBlocos(disco);
    desmontarDisco(disco);
    return 0;
}

// 

// 
Disco* montarDisco(char *entrada)
{
    // 
    FILE *fp = fopen(entrada,"r");
    Disco *disco = (Disco *)malloc(sizeof(Disco));
    Arquivo auxArquivo;
    Operacao auxOperacao;
    char buffer[40] = {0};
    char *pch;
    int auxInt1 = -1, auxInt2 = 0;

    // 
    disco->nBlocos = -1;
    disco->nSegmentosOcupados = -1;
    disco->arquivos = criarArquivo();
    disco->operacoes = criarOperacao();

    // 
    while(!feof(fp))
    {
        // 
        do
        {
            auxInt1++;
            fread(&buffer[auxInt1],sizeof(char),1,fp);
        }
        while(buffer[auxInt1] != '\n' && 1);
        buffer[auxInt1] = '\0';
        auxInt1 = -1;

        // 
        if(!feof(fp))
        {
            // 
            if(disco->nBlocos == -1)
                disco->nBlocos = atoi(buffer);
            // 
            else if(disco->nSegmentosOcupados == -1)
                disco->nSegmentosOcupados = atoi(buffer);
            // 
            else if(auxInt2 < disco->nSegmentosOcupados)
            {
                auxInt2++;
                // 
                pch = strtok(buffer," ");
                auxArquivo.nomeArquivo = *pch;
                // 
                pch = strtok(NULL," ");
                pch[strlen(pch)-1] = '\0';
                auxArquivo.nPrimeiroBloco = atoi(pch);
                // 
                pch = strtok(NULL,"\n");
                auxArquivo.nBlocosOcupados = atoi(pch);
                // 
                disco->arquivos = inserirArquivo(disco->arquivos,auxArquivo.nomeArquivo,auxArquivo.nPrimeiroBloco,auxArquivo.nBlocosOcupados);
            }
            // 
            else
            {
                // 
                pch = strtok(buffer," ");
                pch[strlen(pch)-1] = '\0';
                auxOperacao.idProcesso = atoi(pch);
                // 
                pch = strtok(NULL," ");
                pch[strlen(pch)-1] = '\0';
                auxOperacao.codigoOperacao = atoi(pch);
                // 
                if(auxOperacao.codigoOperacao)
                {
                    pch = strtok(NULL,"\n");
                    auxOperacao.nomeArquivo = *pch;
                    auxOperacao.nBlocosCriar = 0;
                }
                // 
                else
                {
                    // 
                    pch = strtok(NULL," ");
                    auxOperacao.nomeArquivo = *pch;
                    // 
                    pch = strtok(NULL,"\n");
                    auxOperacao.nBlocosCriar = atoi(pch);
                }
                // 
                disco->operacoes = inserirOperacao(disco->operacoes,auxOperacao.idProcesso,auxOperacao.codigoOperacao,auxOperacao.nomeArquivo,auxOperacao.nBlocosCriar);
            }
        }
    }
    fclose(fp);
    return disco;
}

// 
void desmontarDisco(Disco *disco)
{
    desalocarArquivo(disco->arquivos);
    desalocarOperacao(disco->operacoes);
    free(disco);
    return;
}

    int nBlocos;
    int nSegmentosOcupados;
    Arquivo *arquivos;
    Operacao *operacoes;
// 
void imprimirDisco(Disco *disco)
{
    printf("nBlocos: %d\nnSegmentosOcupados: %d\n",disco->nBlocos,disco->nSegmentosOcupados);
    printf("arquivos:\n");
    imprimirArquivo(disco->arquivos);
    printf("operacoes:\n");
    imprimirOperacao(disco->operacoes);
    return;
}

// 
void imprimirBlocos(Disco *disco)
{
    Arquivo *auxArquivo = NULL;
    int auxInt = 0;
    
    for(auxArquivo = disco->arquivos; auxArquivo != NULL; auxArquivo = auxArquivo->proximo)
    {
        printf("|%c",auxArquivo->nomeArquivo);
        if(!vazioArquivo(auxArquivo->proximo))
        {
            while(auxInt < auxArquivo->proximo->nPrimeiroBloco - (auxArquivo->nPrimeiroBloco + auxArquivo->nBlocosOcupados))
            {
                printf("|0");
                auxInt++;
            }
        }
        else
        {
            while(auxInt < disco->nBlocos - (auxArquivo->nPrimeiroBloco + auxArquivo->nBlocosOcupados))
            {
                printf("|0");
                auxInt++;
            }
            printf("|");
        }
        auxInt = 0;
    }
    return;
}

// 

// 
Arquivo* criarArquivo()
{
    return NULL;
}

// 
Arquivo* inserirArquivo(Arquivo *arquivos, char nomeArquivo, int nPrimeiroBloco, int nBlocosOcupados)
{
	Arquivo *aux = NULL;
	Arquivo *novo = (Arquivo *)malloc(sizeof(Arquivo));

    novo->nomeArquivo = nomeArquivo;
    novo->nPrimeiroBloco = nPrimeiroBloco;
    novo->nBlocosOcupados = nBlocosOcupados;
    novo->proximo = NULL;
    if(arquivos != NULL)
    {
        for(aux = arquivos; aux->proximo != NULL; aux = aux->proximo);
        aux->proximo = novo;
    }
    else
        arquivos = novo;
    return arquivos;
}

// 
int vazioArquivo(Arquivo *arquivos)
{
    if(arquivos == NULL)
        return 1;
    else
        return 0;
}

// 
void desalocarArquivo(Arquivo *arquivos)
{
    if(!vazioArquivo(arquivos))
    {
        desalocarArquivo(arquivos->proximo);
        free(arquivos);
    }
    return;
}

// 
void imprimirArquivo(Arquivo *arquivos)
{
    if(!vazioArquivo(arquivos))
    {
        printf("nomeArquivo: %c | nPrimeiroBloco: %d | nBlocosOcupados: %d\n",arquivos->nomeArquivo,arquivos->nPrimeiroBloco,arquivos->nBlocosOcupados);
        imprimirArquivo(arquivos->proximo);
    }
    return;
}

// 

// 
Operacao* criarOperacao()
{
    return NULL;
}

// 
Operacao* inserirOperacao(Operacao *operacoes, int idProcesso, int codigoOperacao, char nomeArquivo, int nBlocosCriar)
{
	Operacao *aux = NULL;
	Operacao *nova = (Operacao *)malloc(sizeof(Operacao));
    nova->idProcesso = idProcesso;
    nova->codigoOperacao = codigoOperacao;
    nova->nomeArquivo = nomeArquivo;
    nova->nBlocosCriar = nBlocosCriar;
    nova->proxima = NULL;
    if(operacoes != NULL)
    {
        for(aux = operacoes; aux->proxima != NULL; aux = aux->proxima);
        aux->proxima = nova;
    }
    else
        operacoes = nova;
    return operacoes;
}

// 
int vazioOperacao(Operacao *operacoes)
{
    if(operacoes == NULL)
        return 1;
    else
        return 0;
}

// 
void desalocarOperacao(Operacao *operacoes)
{
    if(!vazioOperacao(operacoes))
    {
        desalocarOperacao(operacoes->proxima);
        free(operacoes);
    }
    return;
}

// 
void imprimirOperacao(Operacao *operacoes)
{
    if(!vazioOperacao(operacoes))
    {
        printf("idProcesso: %d | codigoOperacao: %d | nomeArquivo: %c | nBlocosCriar: %d\n",operacoes->idProcesso,operacoes->codigoOperacao,operacoes->nomeArquivo,operacoes->nBlocosCriar);
        imprimirOperacao(operacoes->proxima);
    }
    return;
}
